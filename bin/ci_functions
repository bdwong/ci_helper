#!/bin/bash

# ci_functions
#
# Shared functions among ci scripts.
# Source this file to make functions available.

# Set default environment variables
setup_ci_variables(){
	export PROJECT_DIR=`pwd`
	export CI_BRANCH=${GIT_BRANCH:-${CVS_BRANCH:-master}}
	export CI_JOB=${JOB_NAME:-project}
	export CI_RVM_RUBY=${CI_RVM_RUBY:-"1.9.2"}
	# For now, use the same gemset for all jobs.
	#export CI_RVM_USE=${CI_RVM_USE:-"$CI_RVM_RUBY@ci_${CI_JOB}_${CI_BRANCH}"
	export CI_RVM_USE=${CI_RVM_USE:-"$CI_RVM_RUBY@ci_jobs"}

	# Choose 'reset' to load from schema, or 'migrate' to migrate existing database.
	export CI_DB_PREP=${CI_DB_PREP:-reset}
}

# Load RVM into a shell session.
# Returns non-zero if there is an error.
load_rvm(){
	# need the '|| true' because it may return a non-zero value.
	if [[ -s "$HOME/.rvm/scripts/rvm" ]]; then
	  . "$HOME/.rvm/scripts/rvm" || true
	fi

	if ! [[ `type rvm | head -1` == "rvm is a function" ]]; then
	  echo "rvm is not installed correctly."
	  exit 1
	fi
}

# Run bundle install if dependencies have changed.
# Returns non-zero if there is an error.
bundle_install(){
	# install bundler if not yet installed.
	if ! command -v bundle ; then
	  gem install bundler --no-rdoc --no-ri
	  # Set default bundler options to not build documentation.
	  bundle config build --no-rdoc --no-ri
	fi

	# Install bundle if dependencies have changed.
	if ! bundle check; then
	  echo "Bundle check failed. Installing bundle."
	  bundle_cmd='bundle install --local || bundle install'

	  # Exclusive lock on bundler gemset to make multiprocess safe.
	  if ! flock -x "/var/lock/$CI_RVM_USE" -c "$bundle_cmd" ; then
	    echo "Gem bundle was not installed correctly."
	    exit 1
	  fi
	fi
}

# Lock the gemset and run a command with bundler.
using_bundler(){
	# Shared lock on gemset to prevent bundler conflicts with other processes.
	flock -s "/var/lock/$CI_RVM_USE" -c "bundle exec $*"	
}
