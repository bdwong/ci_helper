#!/usr/bin/env ruby

# Take input on stdin to find the rspec summary line with the following format:
#   5584 examples, 128 failures, 28 pending
#
# Echo input to output.
# Compare the failure count with previous count stored in @filename
# Pass if the failure count is less than or equal to the previous count
# Also overwrite the previous count with the current count if it is lower.

class CompareSpecFailures
  def initialize
    @filename = "../expected_failures"
  end

  def expected_failures
    return @expected_failures if @expected_failures
    return nil if not File.exists?(@filename)
    @expected_failures = File.read(@filename).to_i
  end
  
  def actual_failures
    @actual_failures = SpecStatsFilter.new.stats.first[:failures] if @actual_failures.nil?
    @actual_failures
  end
  
  def record_failure_count
    File.open(@filename, "w+") do |f|
      f.puts actual_failures
    end
  end
  
  def compare_failure_count
    puts #empty line
    if expected_failures
      case actual_failures <=> expected_failures
      when -1
        puts "Expected #{expected_failures} failures <  actual #{actual_failures} failures. Changing expectation to #{actual_failures}."
        record_failure_count
      when 0
        puts "Expected #{expected_failures} failures == actual #{actual_failures} failures. Pass."
      when 1
        puts "Expected at most #{expected_failures} failures, actual #{actual_failures} failures. Aborting (***UNSTABLE***)"
        #abort
        # Rely on the Task Scanner plugin to mark the build as unstable.
      end
    else
      puts "Expected failures not initialized. Initializing expectation to actual #{actual_failures}."
      record_failure_count
    end
  end
end

class SpecStatsFilter
  attr_reader :stats, :totals
  
  def initialize(input=STDIN, output=STDOUT)
    @stats=[]
    input.each do |s|
      matches = s.match(/([\d]+) example(?:s)?, ([\d]+) failure(?:s)?(?:, ([\d]+) pending)?/)
      if matches
        @stats << {
          :examples => matches[1].to_i,
          :failures => matches[2].to_i,
          :pending => matches[3].to_i
          }
      end
      # Echo input to output
      output.puts s
    end
    if @stats.empty?
      raise RuntimeError.new("Couldn't find actual failure count in input stream") 
    end
    # Sum the statistics
    @totals = @stats.reduce do |total, one|
      one.each {|key, value| total[key] = total[key].to_i + value}
      total
    end
  end
end

c = CompareSpecFailures.new
c.compare_failure_count
